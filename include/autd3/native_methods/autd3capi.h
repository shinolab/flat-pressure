#pragma once

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <cstdint>

namespace autd3::native_methods {

enum class SamplingMode : uint8_t {
  ExactFrequency = 0,
  SizeOptimized = 1,
};

struct ControllerBuilderPtr {
  void* _0;
};

struct FirmwareInfoListPtr {
  void* _0;
};

struct ResultFirmwareInfoList {
  FirmwareInfoListPtr result;
  uint32_t err_len;
  void* err;
};

struct GroupKVMapPtr {
  void* _0;
};

struct ResultGroupKVMap {
  GroupKVMapPtr result;
  uint32_t err_len;
  void* err;
};

struct GainCalcDrivesMapPtr {
  void* _0;
};

struct ResultGainCalcDrivesMap {
  GainCalcDrivesMapPtr result;
  uint32_t err_len;
  void* err;
};

struct GroupGainMapPtr {
  void* _0;
};

struct ContextPtr {
  void* _0;
};

struct LinkAuditBuilderPtr {
  void* _0;
};

struct ModulationCalcPtr {
  void* _0;
};

struct ResultModulationCalc {
  ModulationCalcPtr result;
  uint32_t result_len;
  uint32_t freq_div;
  uint32_t err_len;
  void* err;
};

struct STMPropsPtr {
  void* _0;
};

extern "C" {

[[nodiscard]] ControllerBuilderPtr AUTDControllerBuilder();

ControllerBuilderPtr AUTDControllerBuilderAddDevice(ControllerBuilderPtr builder,
                                                    double x,
                                                    double y,
                                                    double z,
                                                    double qw,
                                                    double qx,
                                                    double qy,
                                                    double qz);

[[nodiscard]]
ResultController AUTDControllerOpen(ControllerBuilderPtr builder,
                                    LinkBuilderPtr link_builder,
                                    int64_t timeout_ns);

[[nodiscard]] ResultI32 AUTDControllerClose(ControllerPtr cnt);

ResultI32 AUTDControllerDelete(ControllerPtr cnt);

[[nodiscard]] ResultI32 AUTDControllerFPGAState(ControllerPtr cnt, int32_t *out);

[[nodiscard]] ResultFirmwareInfoList AUTDControllerFirmwareInfoListPointer(ControllerPtr cnt);

void AUTDControllerFirmwareInfoGet(FirmwareInfoListPtr p_info_list, uint32_t idx, char *info);

void AUTDControllerFirmwareInfoListPointerDelete(FirmwareInfoListPtr p_info_list);

void AUTDFirmwareLatest(char *latest);

[[nodiscard]]
ResultI32 AUTDControllerSend(ControllerPtr cnt,
                             DatagramPtr d1,
                             DatagramPtr d2,
                             int64_t timeout_ns);

[[nodiscard]] GroupKVMapPtr AUTDControllerGroupCreateKVMap();

[[nodiscard]]
ResultGroupKVMap AUTDControllerGroupKVMapSet(GroupKVMapPtr map,
                                             int32_t key,
                                             DatagramPtr d1,
                                             DatagramPtr d2,
                                             int64_t timeout_ns);

[[nodiscard]]
ResultI32 AUTDControllerGroup(ControllerPtr cnt,
                              const int32_t *map,
                              GroupKVMapPtr kv_map);

[[nodiscard]] DatagramPtr AUTDDatagramClear();

[[nodiscard]]
DatagramPtr AUTDDatagramConfigureDebugSettings(void* f,
                                               void* context,
                                               GeometryPtr geometry);

[[nodiscard]]
DatagramPtr AUTDDatagramConfigureForceFan(void* f,
                                          void* context,
                                          GeometryPtr geometry);

[[nodiscard]]
DatagramPtr AUTDDatagramConfigurePhaseFilter(void* f,
                                             void* context,
                                             GeometryPtr geometry);

[[nodiscard]]
DatagramPtr AUTDDatagramConfigureReadsFPGAState(void* f,
                                                void* context,
                                                GeometryPtr geometry);

[[nodiscard]]
ResultDatagram AUTDDatagramSilencerFixedUpdateRate(uint16_t value_intensity,
                                                   uint16_t value_phase);

[[nodiscard]]
ResultDatagram AUTDDatagramSilencerFixedCompletionSteps(uint16_t value_intensity,
                                                        uint16_t value_phase,
                                                        bool strict_mode);

[[nodiscard]] bool AUTDDatagramSilencerFixedCompletionStepsIsDefault(DatagramPtr silencer);

[[nodiscard]] DatagramPtr AUTDDatagramSynchronize();

[[nodiscard]]
DatagramPtr AUTDGainIntoDatagramWithSegment(GainPtr gain,
                                            Segment segment,
                                            bool update_segment);

[[nodiscard]] DatagramPtr AUTDGainIntoDatagram(GainPtr gain);

[[nodiscard]] ResultGainCalcDrivesMap AUTDGainCalc(GainPtr gain, GeometryPtr geometry);

void AUTDGainCalcGetResult(GainCalcDrivesMapPtr src, Drive *dst, uint32_t idx);

void AUTDGainCalcFreeResult(GainCalcDrivesMapPtr src);

[[nodiscard]] DatagramPtr AUTDDatagramChangeGainSegment(Segment segment);

[[nodiscard]]
GainPtr AUTDGainBessel(double x,
                       double y,
                       double z,
                       double nx,
                       double ny,
                       double nz,
                       double theta_z,
                       uint8_t intensity,
                       uint8_t phase_offset);

[[nodiscard]] bool AUTDGainBesselIsDefault(GainPtr bessel);

[[nodiscard]] GainPtr AUTDGainCustom();

[[nodiscard]]
GainPtr AUTDGainCustomSet(GainPtr custom,
                          uint32_t dev_idx,
                          const Drive *ptr,
                          uint32_t len);

[[nodiscard]]
GainPtr AUTDGainFocus(double x,
                      double y,
                      double z,
                      uint8_t intensity,
                      uint8_t phase_offset);

[[nodiscard]] bool AUTDGainFocusIsDefault(GainPtr focus);

[[nodiscard]]
GroupGainMapPtr AUTDGainGroupCreateMap(const uint32_t *device_indices_ptr,
                                       uint32_t num_devices);

[[nodiscard]]
GroupGainMapPtr AUTDGainGroupMapSet(GroupGainMapPtr map,
                                    uint32_t dev_idx,
                                    const int32_t *map_data);

[[nodiscard]]
GainPtr AUTDGainGroup(GroupGainMapPtr map,
                      const int32_t *keys_ptr,
                      const GainPtr *values_ptr,
                      uint32_t kv_len);

[[nodiscard]] GainPtr AUTDGainNull();

[[nodiscard]]
GainPtr AUTDGainPlane(double nx,
                      double ny,
                      double nz,
                      uint8_t intensity,
                      uint8_t phase_offset);

[[nodiscard]] bool AUTDGainPlanelIsDefault(GainPtr plane);

[[nodiscard]] GainPtr AUTDGainTransducerTest(void* f, ContextPtr context, GeometryPtr geometry);

[[nodiscard]] GainPtr AUTDGainUniform(uint8_t intensity, uint8_t phase);

[[nodiscard]] bool AUTDGainUniformIsDefault(GainPtr uniform);

[[nodiscard]] GeometryPtr AUTDGeometry(ControllerPtr cnt);

[[nodiscard]] uint32_t AUTDGeometryNumDevices(GeometryPtr geo);

[[nodiscard]] DevicePtr AUTDDevice(GeometryPtr geo, uint32_t dev_idx);

[[nodiscard]] uint32_t AUTDDeviceNumTransducers(DevicePtr dev);

[[nodiscard]] double AUTDDeviceGetSoundSpeed(DevicePtr dev);

void AUTDDeviceSetSoundSpeed(DevicePtr dev, double value);

void AUTDDeviceSetSoundSpeedFromTemp(DevicePtr dev, double temp, double k, double r, double m);

[[nodiscard]] double AUTDDeviceGetAttenuation(DevicePtr dev);

void AUTDDeviceSetAttenuation(DevicePtr dev, double value);

void AUTDDeviceCenter(DevicePtr dev, double *center);

void AUTDDeviceTranslate(DevicePtr dev, double x, double y, double z);

void AUTDDeviceRotate(DevicePtr dev, double w, double i, double j, double k);

void AUTDDeviceAffine(DevicePtr dev,
                      double x,
                      double y,
                      double z,
                      double w,
                      double i,
                      double j,
                      double k);

void AUTDDeviceEnableSet(DevicePtr dev, bool value);

[[nodiscard]] bool AUTDDeviceEnableGet(DevicePtr dev);

void AUTDRotationFromEulerZYZ(double x, double y, double z, double *rot);

[[nodiscard]] TransducerPtr AUTDTransducer(DevicePtr dev, uint32_t idx);

void AUTDTransducerPosition(TransducerPtr tr, double *pos);

void AUTDTransducerRotation(TransducerPtr tr, double *rot);

void AUTDTransducerDirectionX(TransducerPtr tr, double *dir);

void AUTDTransducerDirectionY(TransducerPtr tr, double *dir);

void AUTDTransducerDirectionZ(TransducerPtr tr, double *dir);

[[nodiscard]] double AUTDTransducerWavelength(TransducerPtr tr, double sound_speed);

[[nodiscard]] LinkPtr AUTDLinkGet(ControllerPtr cnt);

[[nodiscard]] LinkAuditBuilderPtr AUTDLinkAudit();

[[nodiscard]]
LinkAuditBuilderPtr AUTDLinkAuditWithTimeout(LinkAuditBuilderPtr audit,
                                             uint64_t timeout_ns);

[[nodiscard]] LinkBuilderPtr AUTDLinkAuditIntoBuilder(LinkAuditBuilderPtr audit);

[[nodiscard]] bool AUTDLinkAuditIsOpen(LinkPtr audit);

[[nodiscard]] uint64_t AUTDLinkAuditTimeoutNs(LinkPtr audit);

[[nodiscard]] int64_t AUTDLinkAuditLastTimeoutNs(LinkPtr audit);

void AUTDLinkAuditDown(LinkPtr audit);

void AUTDLinkAuditBreakDown(LinkPtr audit);

[[nodiscard]] uint32_t AUTDLinkAuditCpuNumTransducers(LinkPtr audit, uint32_t idx);

void AUTDLinkAuditFpgaAssertThermalSensor(LinkPtr audit, uint32_t idx);

void AUTDLinkAuditFpgaDeassertThermalSensor(LinkPtr audit, uint32_t idx);

[[nodiscard]] bool AUTDLinkAuditFpgaIsForceFan(LinkPtr audit, uint32_t idx);

[[nodiscard]] Segment AUTDLinkAuditFpgaCurrentStmSegment(LinkPtr audit, uint32_t idx);

[[nodiscard]] Segment AUTDLinkAuditFpgaCurrentModSegment(LinkPtr audit, uint32_t idx);

[[nodiscard]] bool AUTDLinkAuditFpgaIsStmGainMode(LinkPtr audit, Segment segment, uint32_t idx);

[[nodiscard]] uint16_t AUTDLinkAuditFpgaSilencerUpdateRateIntensity(LinkPtr audit, uint32_t idx);

[[nodiscard]] uint16_t AUTDLinkAuditFpgaSilencerUpdateRatePhase(LinkPtr audit, uint32_t idx);

[[nodiscard]]
uint16_t AUTDLinkAuditFpgaSilencerCompletionStepsIntensity(LinkPtr audit,
                                                           uint32_t idx);

[[nodiscard]] uint16_t AUTDLinkAuditFpgaSilencerCompletionStepsPhase(LinkPtr audit, uint32_t idx);

[[nodiscard]] bool AUTDLinkAuditFpgaSilencerFixedCompletionStepsMode(LinkPtr audit, uint32_t idx);

void AUTDLinkAuditFpgaDebugTypes(LinkPtr audit, uint32_t idx, uint8_t *ty);

void AUTDLinkAuditFpgaDebugValues(LinkPtr audit, uint32_t idx, uint16_t *value);

[[nodiscard]]
uint32_t AUTDLinkAuditFpgaStmFrequencyDivision(LinkPtr audit,
                                               Segment segment,
                                               uint32_t idx);

[[nodiscard]] uint32_t AUTDLinkAuditFpgaStmCycle(LinkPtr audit, Segment segment, uint32_t idx);

[[nodiscard]] uint32_t AUTDLinkAuditFpgaSoundSpeed(LinkPtr audit, Segment segment, uint32_t idx);

[[nodiscard]]
LoopBehavior AUTDLinkAuditFpgaStmLoopBehavior(LinkPtr audit,
                                              Segment segment,
                                              uint32_t idx);

[[nodiscard]]
uint32_t AUTDLinkAuditFpgaModulationFrequencyDivision(LinkPtr audit,
                                                      Segment segment,
                                                      uint32_t idx);

[[nodiscard]]
uint32_t AUTDLinkAuditFpgaModulationCycle(LinkPtr audit,
                                          Segment segment,
                                          uint32_t idx);

void AUTDLinkAuditFpgaModulation(LinkPtr audit, Segment segment, uint32_t idx, uint8_t *data);

[[nodiscard]]
LoopBehavior AUTDLinkAuditFpgaModulationLoopBehavior(LinkPtr audit,
                                                     Segment segment,
                                                     uint32_t idx);

void AUTDLinkAuditFpgaDrives(LinkPtr audit,
                             Segment segment,
                             uint32_t idx,
                             uint32_t stm_idx,
                             uint8_t *intensities,
                             uint8_t *phases);

void AUTDLinkAuditFpgaPhaseFilter(LinkPtr audit, uint32_t idx, uint8_t *phase_filter);

[[nodiscard]] LinkBuilderPtr AUTDLinkNop();

[[nodiscard]] SamplingConfiguration AUTDModulationSamplingConfig(ModulationPtr m);

[[nodiscard]]
DatagramPtr AUTDModulationIntoDatagramWithSegment(ModulationPtr m,
                                                  Segment segment,
                                                  bool update_segment);

[[nodiscard]] DatagramPtr AUTDModulationIntoDatagram(ModulationPtr m);

[[nodiscard]] ResultI32 AUTDModulationSize(ModulationPtr m);

[[nodiscard]] ResultModulationCalc AUTDModulationCalc(ModulationPtr m);

void AUTDModulationCalcGetResult(ModulationCalcPtr src, uint8_t *dst);

[[nodiscard]] DatagramPtr AUTDDatagramChangeModulationSegment(Segment segment);

[[nodiscard]]
ModulationPtr AUTDModulationCustom(SamplingConfiguration config,
                                   const uint8_t *ptr,
                                   uint64_t len,
                                   LoopBehavior loop_behavior);

[[nodiscard]]
ModulationPtr AUTDModulationFourier(const ModulationPtr *components,
                                    uint32_t size,
                                    LoopBehavior loop_behavior);

[[nodiscard]]
ModulationPtr AUTDModulationWithRadiationPressure(ModulationPtr m,
                                                  LoopBehavior loop_behavior);

[[nodiscard]]
ModulationPtr AUTDModulationSine(double freq,
                                 SamplingConfiguration config,
                                 uint8_t intensity,
                                 uint8_t offset,
                                 uint8_t phase,
                                 SamplingMode mode,
                                 LoopBehavior loop_behavior);

[[nodiscard]] bool AUTDModulationSineIsDefault(ModulationPtr sine);

[[nodiscard]]
ModulationPtr AUTDModulationSquare(double freq,
                                   SamplingConfiguration config,
                                   uint8_t low,
                                   uint8_t high,
                                   double duty,
                                   SamplingMode mode,
                                   LoopBehavior loop_behavior);

[[nodiscard]] bool AUTDModulationSquareIsDefault(ModulationPtr square);

[[nodiscard]] ModulationPtr AUTDModulationStatic(uint8_t intensity, LoopBehavior loop_behavior);

[[nodiscard]] bool AUTDModulationStaticIsDefault(ModulationPtr s);

[[nodiscard]]
ModulationPtr AUTDModulationWithTransform(ModulationPtr m,
                                          void* f,
                                          void* context,
                                          LoopBehavior loop_behavior);

[[nodiscard]] STMPropsPtr AUTDSTMPropsFromFreq(double freq);

[[nodiscard]] STMPropsPtr AUTDSTMPropsFromPeriod(uint64_t p);

[[nodiscard]] STMPropsPtr AUTDSTMPropsFromSamplingConfig(SamplingConfiguration config);

[[nodiscard]]
STMPropsPtr AUTDSTMPropsWithLoopBehavior(STMPropsPtr props,
                                         LoopBehavior loop_behavior);

[[nodiscard]] double AUTDSTMPropsFrequency(STMPropsPtr props, uint64_t size);

[[nodiscard]] uint64_t AUTDSTMPropsPeriod(STMPropsPtr props, uint64_t size);

[[nodiscard]] ResultSamplingConfig AUTDSTMPropsSamplingConfig(STMPropsPtr props, uint64_t size);

[[nodiscard]]
ResultFocusSTM AUTDSTMFocus(STMPropsPtr props,
                            const double *points,
                            const uint8_t *intensities,
                            uint64_t size);

[[nodiscard]]
DatagramPtr AUTDSTMFocusIntoDatagramWithSegment(FocusSTMPtr stm,
                                                Segment segment,
                                                bool update_segment);

[[nodiscard]] DatagramPtr AUTDSTMFocusIntoDatagram(FocusSTMPtr stm);

[[nodiscard]] DatagramPtr AUTDDatagramChangeFocusSTMSegment(Segment segment);

[[nodiscard]]
ResultGainSTM AUTDSTMGain(STMPropsPtr props,
                          const GainPtr *gains,
                          uint32_t size,
                          GainSTMMode mode);

[[nodiscard]]
DatagramPtr AUTDSTMGainIntoDatagramWithSegment(GainSTMPtr stm,
                                               Segment segment,
                                               bool update_segment);

[[nodiscard]] DatagramPtr AUTDSTMGainIntoDatagram(GainSTMPtr stm);

[[nodiscard]] DatagramPtr AUTDDatagramChangeGainSTMSegment(Segment segment);

} // extern "C"

} // namespace autd3::native_methods
