cmake_minimum_required(VERSION 3.21)

if(${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_BINARY_DIR})
  message(FATAL_ERROR "In-source builds not allowed. Please make a new directory (called a build directory) and run CMake from there. You may need to remove CMakeCache.txt. ")
endif()

project(autd3 VERSION 22.1.0)

message(STATUS "Build AUTD3: ${PROJECT_VERSION}")

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

set(CMAKE_POLICY_DEFAULT_CMP0077 NEW)

option(USE_SYSTEM_EIGEN "Use system installed eigen3" OFF)
option(USE_SYSTEM_LIBCORO "Use system installed libcoro" OFF)
option(AUTD3_ASYNC_API "Use async APIs" ON)

if(${CMAKE_VERSION} VERSION_GREATER_EQUAL "3.24.0") 
  cmake_policy(SET CMP0135 NEW)
endif()

include(FetchContent)
if(USE_SYSTEM_EIGEN)
  find_package(Eigen3 REQUIRED)
else()
  set(EIGEN_BUILD_DOC OFF)
  set(BUILD_TESTING OFF)
  set(EIGEN_BUILD_PKGCONFIG OFF)
  FetchContent_Declare(
    eigen
    GIT_REPOSITORY https://gitlab.com/libeigen/eigen.git
    GIT_TAG 3.4.0)
  FetchContent_MakeAvailable(eigen)
endif()

if(WIN32)
  FetchContent_Declare(
    soem
    GIT_REPOSITORY https://github.com/OpenEtherCATsociety/SOEM.git
    GIT_TAG v1.4.0)
  FetchContent_Populate(soem)
  set(WPCAP_LIB_DIR ${PROJECT_BINARY_DIR}/../soem-src/oshw/win32/wpcap/Lib/x64)
endif()

if(AUTD3_ASYNC_API AND APPLE)
  if(CMAKE_CXX_COMPILER_ID MATCHES "AppleClang|Clang")
    if (CMAKE_CXX_COMPILER_VERSION LESS 16.0.0)
        set(AUTD3_ASYNC_API OFF)
        message(STATUS "Disable async APIs on macOS because Clang version ${CMAKE_CXX_COMPILER_VERSION} is not supported. Use 16.0.0 or higher version.")
    endif()
  else()
    set(AUTD3_ASYNC_API OFF)
    message(STATUS "Disable async APIs on macOS.")
  endif()
endif()

if(AUTD3_ASYNC_API)
  if(USE_SYSTEM_LIBCORO)
    find_package(libcoro REQUIRED)
  else()
    FetchContent_Declare(
        libcoro
        GIT_REPOSITORY https://github.com/jbaldwin/libcoro.git
        GIT_TAG v0.11.1
    )
    set(LIBCORO_BUILD_TESTS OFF)
    set(LIBCORO_BUILD_EXAMPLES OFF)
    set(LIBCORO_FEATURE_NETWORKING OFF)
    FetchContent_MakeAvailable(libcoro)
  endif()
endif()

add_library(autd3_common INTERFACE)
target_include_directories(autd3_common INTERFACE ${PROJECT_SOURCE_DIR}/include)
target_link_libraries(autd3_common INTERFACE Eigen3::Eigen)
target_compile_definitions(autd3_common INTERFACE EIGEN_MPL2_ONLY)
target_link_directories(autd3_common INTERFACE ${PROJECT_SOURCE_DIR}/lib)
if(MSVC)
  target_compile_options(autd3_common INTERFACE /wd4819)
  target_compile_options(autd3_common INTERFACE /wd4324)
endif()
if(AUTD3_ASYNC_API)
  target_link_libraries(autd3_common INTERFACE libcoro)
  target_compile_definitions(autd3_common INTERFACE AUTD3_ASYNC_API)
endif()
if(WIN32)
  target_compile_definitions(autd3_common INTERFACE NOMINMAX)
endif()
add_library(autd3::common ALIAS autd3_common)

add_library(autd3 INTERFACE)
target_link_libraries(autd3 INTERFACE autd3::common autd3capi)
if(WIN32)
  target_link_libraries(autd3 INTERFACE ntdll.lib Winmm.lib bcrypt.lib userenv.lib RuntimeObject.lib Propsys.lib)
elseif(APPLE)
  target_link_libraries(autd3 INTERFACE "-framework CoreFoundation")
endif()
add_library(autd3::autd3 ALIAS autd3)

add_library(autd3_gain_holo INTERFACE)
target_link_libraries(autd3_gain_holo INTERFACE autd3::common autd3capi_gain_holo)
add_library(autd3::gain::holo ALIAS autd3_gain_holo)

add_library(autd3_modulation_audio_file INTERFACE)
target_link_libraries(autd3_modulation_audio_file INTERFACE autd3::common autd3capi_modulation_audio_file)
add_library(autd3::modulation::audio_file ALIAS autd3_modulation_audio_file)

add_library(autd3_link_soem INTERFACE)
target_link_libraries(autd3_link_soem INTERFACE autd3::common autd3capi_link_soem)
if(WIN32)
  target_link_libraries(autd3_link_soem INTERFACE Ws2_32.lib Winmm.lib)
  target_link_directories(autd3_link_soem INTERFACE ${WPCAP_LIB_DIR})
  target_link_libraries(autd3_link_soem INTERFACE wpcap.lib Packet.lib)
elseif(APPLE)
  target_link_libraries(autd3_link_soem INTERFACE pcap)
endif()
add_library(autd3::link::soem ALIAS autd3_link_soem)

add_library(autd3_link_twincat INTERFACE)
target_link_libraries(autd3_link_twincat INTERFACE autd3::common autd3capi_link_twincat)
if(WIN32)
  target_link_libraries(autd3_link_twincat INTERFACE ws2_32)
endif()
add_library(autd3::link::twincat ALIAS autd3_link_twincat)

add_library(autd3_link_simulator INTERFACE)
target_link_libraries(autd3_link_simulator INTERFACE autd3::common autd3capi_link_simulator)
if(WIN32)
  target_link_libraries(autd3_link_simulator INTERFACE ws2_32)
endif()
add_library(autd3::link::simulator ALIAS autd3_link_simulator)

find_package(Python3 COMPONENTS Development)
if(WIN32 OR APPLE)
  set(AUTD3_LINK_VISUALIZER_BUILD ${Python3_FOUND})
else()
  find_package(Fontconfig)
  find_package(Freetype)
  set(AUTD3_LINK_VISUALIZER_BUILD (${Python3_FOUND} AND ${Fontconfig_FOUND} AND ${Freetype_FOUND}))
endif()
if(${AUTD3_LINK_VISUALIZER_BUILD})
  add_library(autd3_link_visualizer INTERFACE)
  target_link_libraries(autd3_link_visualizer INTERFACE autd3::common autd3capi_link_visualizer)
  target_link_libraries(autd3_link_visualizer INTERFACE Python3::Python)
  if(WIN32)
  elseif(APPLE)
    target_link_libraries(autd3_link_visualizer INTERFACE "-framework CoreGraphics")
    target_link_libraries(autd3_link_visualizer INTERFACE "-framework CoreText")
  else()
    target_link_libraries(autd3_link_visualizer INTERFACE Fontconfig::Fontconfig Freetype::Freetype)
  endif()
  add_library(autd3::link::visualizer ALIAS autd3_link_visualizer)
else()
  if(NOT ${Python3_FOUND})
    message(STATUS "Cannot find Python3. Skip building autd3::link::visualizer.")
  else()
    message(STATUS "Cannot find Fontconfig and/or Freetype. Skip building autd3::link::visualizer.")
  endif()
endif()

if(APPLE)
else()
  find_package(CUDAToolkit COMPONENTS cudart cublas cusolver)
  if(${CUDAToolkit_FOUND})
    add_library(autd3_backend_cuda INTERFACE)
    target_link_libraries(autd3_backend_cuda INTERFACE autd3::common autd3capi_backend_cuda)
    target_link_libraries(autd3_backend_cuda INTERFACE CUDA::cudart CUDA::cusolver CUDA::cublasLt)
    add_library(autd3::backend::cuda ALIAS autd3_backend_cuda)
  else()
    message(STATUS "Cannot find CUDA. Skip building autd3::backend::cuda.")
  endif()
endif()

#file(GLOB_RECURSE autd3_include ${PROJECT_SOURCE_DIR}/include/**/*.hpp)
#add_library(autd3_include ${autd3_include})
#set_target_properties(autd3_include PROPERTIES LINKER_LANGUAGE CXX)
#target_include_directories(autd3_include PUBLIC ${PROJECT_SOURCE_DIR}/include)
#target_link_libraries(autd3_include PUBLIC Eigen3::Eigen)
#target_compile_definitions(autd3_include PUBLIC EIGEN_MPL2_ONLY)
